<?xml version="1.0" encoding="UTF-8"?>

<!-- 
   Copyright (c) 2009, 2011 Mountainminds GmbH & Co. KG and Contributors
   All rights reserved. This program and the accompanying materials
   are made available under the terms of the Eclipse Public License v1.0
   which accompanies this distribution, and is available at
   http://www.eclipse.org/legal/epl-v10.html
  
   Contributors:
      Marc R. Hoffmann - initial API and implementation
      
   $Id: $
-->

<project name="org.jacoco.build.bundle" default="build" xmlns:jacoco="antlib:org.jacoco.ant">

	<description>
		This build file is executed for every JaCoCo bundle. Every bundle must
		contain a buildhook.xml file that gets imported into this build file and
		customizes the specific build actions for the bundle.
	</description>
	
	<property name="source.bundle.dir" location="${basedir}"/>
	<property name="source.bundle.java.dir" location="${source.bundle.dir}/src"/>

	<!-- Additional resources to include with the compiled classes. By default
	     none, can be overwritten by the build hook.                         -->
	<fileset dir="${source.bundle.java.dir}" excludes="**/*" id="classpathresources"/>

	<!-- Additional resources to be filtered and include with the compiled
	     classes. By default none, can be overwritten by the build hook.     -->
	<fileset dir="${source.bundle.java.dir}" excludes="**/*" id="filteredclasspathresources"/>

	
	<import file="${source.bundle.dir}/buildhook.xml"/>
	
	<!-- The following property should be overwritten by the project specific build hook -->
	<property name="testscope" value="*"/>
	
	<target name="manifest">
		<property name="source.bundle.manifest.file" location="${source.bundle.dir}/META-INF/MANIFEST.MF"/>
		<property name="result.temp.bundle.manifest.file" location="${result.tmp.bundle.dir}/MANIFEST.MF"/>
		<copy file="${source.bundle.manifest.file}" tofile="${result.temp.bundle.manifest.file}"/>
		<replace file="${result.temp.bundle.manifest.file}" token="qualifier" value="${build.qualifier}"/>
		<property prefix="manifest" file="${result.temp.bundle.manifest.file}"/>
		<property name="qualified.bundle.version" value="${manifest.Bundle-Version}"/>
	</target>
	
	<!-- =================================================================== 
         COMPILE 
	     =================================================================== -->

	<target name="compile" if="do.compile" depends="manifest">
		<property name="result.tmp.bundle.classes.dir" location="${result.tmp.bundle.dir}/classes"/>
		<mkdir dir="${result.tmp.bundle.classes.dir}"/>
		<javac srcdir="${source.bundle.java.dir}" destdir="${result.tmp.bundle.classes.dir}"
		       debug="true" source="1.5" target="${java.target.version}" includeAntRuntime="no">
			<classpath refid="dependencies"/>
		</javac>
		<copy todir="${result.tmp.bundle.classes.dir}">
			<fileset refid="classpathresources"/>
		</copy>
		<copy todir="${result.tmp.bundle.classes.dir}">
			<fileset refid="filteredclasspathresources"/>
			<filterset begintoken="$" endtoken="$">
				<filter token="qualified.bundle.version" value="${qualified.bundle.version}"/>
				<filter token="jacoco.home.url" value="${jacoco.home.url}"/>
			</filterset>
		</copy>
	</target>
	
	
	<!-- =================================================================== 
	     PACKAGE 
	     =================================================================== -->
	
	<target name="about">
		<property name="source.bundle.about.file" location="${source.bundle.dir}/about.html"/>
		<property name="result.temp.bundle.about.file" location="${result.tmp.bundle.dir}/about.html"/>
		<copy file="${source.bundle.about.file}" tofile="${result.temp.bundle.about.file}">
			<filterset>
				<filter token="build.date" value="${build.date}"/>
			</filterset>
		</copy>
	</target>
	
	<target name="runcustompackage" if="do.custompackage" depends="manifest,about">
		<antcall target="custompackage" inheritall="true" inheritrefs="true"/>
	</target>
	
	<target name="package" if="do.package" depends="compile,runcustompackage,manifest,about">
		<property name="result.dist.bundle.jar.file" location="${result.dist.lib.dir}/${manifest.Bundle-SymbolicName}_${qualified.bundle.version}.jar"/>
		<mkdir dir="${result.dist.lib.dir}"/>
		<jar destfile="${result.dist.bundle.jar.file}" manifest="${result.temp.bundle.manifest.file}" level="9">
			<fileset dir="${result.tmp.bundle.classes.dir}"/>
			<file file="${result.temp.bundle.about.file}"/>
		</jar>
	</target>
	
	
	<!-- =================================================================== 
	     VERIFY 
	     =================================================================== -->
	
	<target name="runcustomverify" if="do.customverify">
		<antcall target="customverify" inheritall="true" inheritrefs="true"/>
	</target>
	
	<target name="verify" if="do.verify" depends="package,runcustomverify">
		
		<!-- of course we meassure code coverage for JaCoCo tests -->
		<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
			<classpath>
				<file file="${result.dist.lib.dir}/jacocoant.jar"/>
			</classpath>
		</taskdef>
		
		<property name="result.tmp.bundle.test.dir" location="${result.tmp.bundle.dir}/test"/>
		<property name="result.tmp.bundle.tmp.dir" location="${result.tmp.bundle.dir}/tmp"/>
		<property name="result.tmp.coverage.file" location="${result.tmp.bundle.test.dir}/jacoco.exec"/>
		<mkdir dir="${result.tmp.bundle.test.dir}"/>
		<mkdir dir="${result.tmp.bundle.tmp.dir}"/>
		<jacoco:coverage
				append="true"
				destfile="${result.tmp.coverage.file}"
				includes="${testscope}"
				exclClassLoader="sun.reflect.DelegatingClassLoader:org.jacoco.core.test.TargetLoader"
			    sessionid="${manifest.Bundle-SymbolicName}">
			
			<junit haltonfailure="true" fork="true" forkmode="once" dir="${source.bundle.dir}" tempdir="${result.tmp.bundle.tmp.dir}">
				<jvmarg line="${verify.jvm.args}"/>
				<sysproperty key="java.io.tmpdir" value="${result.tmp.bundle.tmp.dir}"/>
	    		<batchtest todir="${result.tmp.bundle.test.dir}" >
					<fileset dir="${result.tmp.bundle.classes.dir}">
   						<include name="**/*Test.class"/>
					</fileset>
	   			</batchtest>
				<classpath>
					<pathelement location="${result.tmp.bundle.classes.dir}"/>
					<path refid="dependencies"/>
				</classpath>
				<formatter type="xml"/>
				<formatter type="brief" usefile="false"/>
			</junit>
		</jacoco:coverage>
	</target>
	
	
	<!-- =================================================================== 
	     DOC 
	     =================================================================== -->
	
	<target name="doc" if="do.customdoc" depends="manifest">
		<antcall target="customdoc" inheritall="true" inheritrefs="true"/>
    </target>
	
	
	<!-- =================================================================== 
	     LEGAL 
	     =================================================================== -->

	<target name="legal">
		<fileset dir="${source.bundle.dir}" includes="**/*.java,**/*.xml" excludes="result/**,bin/**" id="missinglicense.fileset">
			<not>
				<and>
					<contains text="Copyright (c) ${copyright.years} Mountainminds GmbH &amp; Co. KG and Contributors"/>
					<contains text="All rights reserved. This program and the accompanying materials"/>
					<contains text="are made available under the terms of the Eclipse Public License v1.0"/>
					<contains text="which accompanies this distribution, and is available at"/>
					<contains text="http://www.eclipse.org/legal/epl-v10.html"/>
				</and>
			</not>
		</fileset>
		
		<pathconvert property="missing" refid="missinglicense.fileset"/>
		<fail message="Invalid license info in: ${missing}">
			<condition>
				<not>
					<equals arg1="${missing}" arg2=""/>
				</not>
			</condition>
		</fail>
	</target>
				
	
	<!-- =================================================================== 
	     BUILD 
	     =================================================================== -->
	
	<target name="build" depends="compile,package,verify,doc,legal"/>

	
	<!-- =================================================================== 
	     SIGN 
	     =================================================================== -->

	<target name="sign" depends="package">
		<signjar keystore="${sign.keystore.file}" 
			     storepass="${sign.keystore.password}"
			     alias="${sign.keystore.alias}"
			     tsaurl="${sign.tsa.url}"
			     tsacert="${sign.tsa.cert}"
			     lazy="true">
			<fileset dir="${result.dist.lib.dir}" includes="*.jar" erroronmissingdir="false"/>
		</signjar>
	</target>

	
	<!-- =================================================================== 
	     DELIVER 
	     =================================================================== -->

	<target name="deliver" depends="build,sign"/>

	
</project>