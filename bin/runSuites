#!/bin/bash
# http://stackoverflow.com/questions/6593531/running-a-limited-number-of-child-processes-in-parallel-in-bash

set -o monitor 
# means: run background processes in a separate processes...
trap add_next_job CHLD 
# execute add_next_job when we receive a child complete signal

RESULTDIR=~/coverage-results
mkdir -p "$RESULTDIR"

# names of suites
declare -a todo_array
# max_suites slots for processes with their own num
declare -a job_num

todo_array=($*) # places output into an array
if [[ ${#todo_array[*]} -eq 0 ]]
then
    echo "no of jobs: ${#todo_array[*]}"
    exit 
fi

# change list number. SET THIS!
change=476788

index=0
max_jobs=19

# param slot#
function free_slot {
    echo "freeing slot $1"
    rm "slot-$1"
}

# param slot# job-name
function reserve_slot {
    echo "reserving slot $1 with job $2"
    echo "$2" > "slot-$1"
}

function is_slot_empty {
    echo "testing slot $1" $( test ! -e "slot-$1" )
    test ! -e "slot-$1"
    return $?
}

function free_all_slots {
    echo "freeing all slots"
    rm -f slot-*
}

function print_jobs {
    echo "all jobs"
    for i in slot-*
    do
	if [ "$i" = 'slot-*' ]; then echo "no jobs"; break; fi
	echo "all num $j suite $i " $( cat $i )
	j=$(( j+1 ))
    done
}

function add_next_job {
    # if still jobs to do then add one
    if [[ $index -lt ${#todo_array[*]} ]]
    # the hash in the if is not a comment - rather it's bash awkward way of getting its length
    then
	#print_jobs
	# Find empty job_num slot.
	local j=0
	local num=0
	for ((i=0; i<$max_jobs; i++))
	do
#	    is_slot_empty "slot-$i"
	    if [ ! -e "slot-$i" ]; then num=$j; break; fi
	    j=$(( j+1 ))
	done
	reserve_slot $num "${todo_array[$index]}"
        do_job ${todo_array[$index]} $num &
        index=$(($index+1))
    fi
}

# parameter suite name, index into job num
function do_job {
    local num=$2
    local suite=$1
    echo ">>>> Starting suite $suite in num $num"

    # skip setup after first
    if [ $index -gt 1 ]; then GITMO="gitmo-offline"; else GITMO=gitmo; fi

    $GITMO -num $num -branch eng_emerald_pl_ready_merge -change $change -suite $suite -coverage -perm 399 -mem 1399 $skip
    cp /gitmo/auto/instance${num}/results/*.exec "${RESULTDIR}"
    free_slot $num
}


free_all_slots    

# Add initial set of jobs. When one finishes it will be replaced by a new one.
while [[ $index -lt $max_jobs && $index -lt ${#todo_array[*]} ]]
do
    add_next_job
    sleep 80
done

# wait for all jobs to complete
wait
echo "done"
