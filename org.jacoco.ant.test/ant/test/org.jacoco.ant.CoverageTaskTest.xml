<?xml version="1.0" encoding="UTF-8"?>

<!-- 
   Copyright (c) 2009, 2010 Mountainminds GmbH & Co. KG and Contributors
   All rights reserved. This program and the accompanying materials
   are made available under the terms of the Eclipse Public License v1.0
   which accompanies this distribution, and is available at
   http://www.eclipse.org/legal/epl-v10.html
  
   Contributors:
      Brock Janiczak - initial API and implementation
      
   $Id: $
-->

<project name="JaCoCo Coverage Task Tests" xmlns:au="antlib:org.apache.ant.antunit" xmlns:jacoco="antlib:org.jacoco.ant">
	
	<path id="ant-test-classes">
		<path path="${result.tmp.bundle.classes.dir}"/>
	</path>
	
	<path id="bundle-org.junit4" path="${bundle-org.junit4.path}"/>
			
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath>
			<file file="${result.dist.lib.dir}/jacocoant.jar"/>
		</classpath>
	</taskdef>
	
	<target name="setUp">
		<delete dir="${result.tmp.bundle.testdata.dir}" quiet="false" failonerror="true"/>
		<mkdir dir="${result.tmp.bundle.testdata.dir}"/>
	</target>

	<target name="testNoSubTasks">
		<au:expectfailure expectedMessage="A child task must be supplied for the coverage task">
			<jacoco:coverage/>
		</au:expectfailure>
	</target>

	<target name="testMultipleSubTasks">
		<au:expectfailure expectedMessage="Only one child task can be supplied to the coverge task">
			<jacoco:coverage>
				<java fork="true" classname="org.jacoco.ant.test.EmptyMain">
					<classpath>
						<path refid="ant-test-classes"/>
					</classpath>
				</java>
				<java fork="true" classname="org.jacoco.ant.test.EmptyMain">
					<classpath>
						<path refid="ant-test-classes"/>
					</classpath>
				</java>
			</jacoco:coverage>
		</au:expectfailure>
	</target>
	
	<target name="testInvalidSubTask">
		<au:expectfailure expectedMessage="jar is not a valid child of the coverage task">
			<jacoco:coverage>
				<jar destfile="test.jar"/>
			</jacoco:coverage>
		</au:expectfailure>
	</target>

	<target name="testCoverageOfForkedJava">
		<property name="testCoverageOfForkedJava.exec.file" location="${result.tmp.bundle.testdata.dir}/testCoverageOfForkedJava.exec"/>
		<jacoco:coverage destfile="${testCoverageOfForkedJava.exec.file}">
			<java classname="org.jacoco.ant.test.EmptyMain" fork="true">
				<classpath>
					<path refid="ant-test-classes"/>
				</classpath>
			</java>
		</jacoco:coverage>
		<au:assertLogContains text="Enhancing java with coverage"/>
		<au:assertFileExists file="${testCoverageOfForkedJava.exec.file}"/>
	</target>
	
	<target name="testCoverageOfForkedJavaDisabled">
		<property name="testCoverageOfForkedJava.exec.file" location="${result.tmp.bundle.testdata.dir}/testCoverageOfForkedJavaDisabled.exec"/>
		<jacoco:coverage enabled="false" destfile="${testCoverageOfForkedJava.exec.file}">
			<java classname="org.jacoco.ant.test.EmptyMain" fork="true">
				<classpath>
					<path refid="ant-test-classes"/>
				</classpath>
			</java>
		</jacoco:coverage>
		<au:assertLogDoesntContain text="Enhancing java with coverage"/>
		<au:assertFileDoesntExist file="${testCoverageOfForkedJava.exec.file}"/>
	</target>

	<target name="testCoverageOfNonForkedJava">
		<au:expectfailure expectedMessage="Coverage can only be applied on a forked VM">
			<jacoco:coverage>
				<java classname="org.jacoco.ant.test.EmptyMain" fork="false">
					<classpath>
						<path refid="ant-test-classes"/>
					</classpath>
				</java>
			</jacoco:coverage>
		</au:expectfailure>
	</target>

	<target name="testCoverageOfForkedJUnit">
		<property name="testCoverageOfForkedJUnit.exec.file" location="${result.tmp.bundle.testdata.dir}/testCoverageOfForkedJUnit.exec"/>
		<jacoco:coverage destfile="${testCoverageOfForkedJUnit.exec.file}">
			<junit fork="true" >
				<classpath>
					<path refid="bundle-org.junit4"/>
					<path refid="ant-test-classes"/>
				</classpath>
			    <batchtest todir="${result.tmp.bundle.test.dir}" >
					<fileset dir="${result.tmp.bundle.classes.dir}">
						<include name="org/jacoco/ant/test/EmptyTest.class"/>
					</fileset>
			    </batchtest>
			</junit>
		</jacoco:coverage>
		<au:assertLogContains text="Enhancing junit with coverage"/>
		<au:assertFileExists file="${testCoverageOfForkedJUnit.exec.file}"/>
	</target>
	
	<target name="testCoverageOfForkedJUnitDisabled">
		<property name="testCoverageOfForkedJUnit.exec.file" location="${result.tmp.bundle.testdata.dir}/testCoverageOfForkedJUnitDisabled.exec"/>
		<jacoco:coverage enabled="false" destfile="${testCoverageOfForkedJUnit.exec.file}">
			<junit fork="true" >
				<classpath>
					<path refid="bundle-org.junit4"/>
					<path refid="ant-test-classes"/>
				</classpath>
			    <batchtest todir="${result.tmp.bundle.test.dir}" >
					<fileset dir="${result.tmp.bundle.classes.dir}">
						<include name="org/jacoco/ant/test/EmptyTest.class"/>
					</fileset>
			    </batchtest>
			</junit>
		</jacoco:coverage>
		<au:assertLogDoesntContain text="Enhancing junit with coverage"/>
		<au:assertFileDoesntExist file="${testCoverageOfForkedJUnit.exec.file}"/>
	</target>

	<target name="testCoverageOfNonForkedJUnit">
		<au:expectfailure expectedMessage="Coverage can only be applied on a forked VM">
			<jacoco:coverage>
				<junit fork="false">
					<classpath>
						<path refid="bundle-org.junit4"/>
						<path refid="ant-test-classes"/>
					</classpath>
				    <batchtest todir="${result.tmp.bundle.test.dir}" >
						<fileset dir="${result.tmp.bundle.classes.dir}">
							<include name="org/jacoco/ant/test/EmptyTest.class"/>
						</fileset>
				    </batchtest>
				</junit>
			</jacoco:coverage>
		</au:expectfailure>
	</target>
	
</project>