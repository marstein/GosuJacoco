
<project name="JaCoCo Ant test suite" xmlns:au="antlib:org.apache.ant.antunit" xmlns:jacoco="antlib:org.jacoco.ant">
	
	<path id="bundle-org.objectweb.asm">
		<fileset dir="${target.plugins.dir}" includes="org.objectweb.asm_3.1.0.*.jar"/>
	</path>

	<path id="ant-test-classes">
		<path path="${result.tmp.bundle.classes.dir}"/>
	</path>
	
	<path id="bundle-org.junit4">
		<fileset dir="${target.plugins.dir}" includes="org.junit4_*/junit.jar"/>
		<fileset dir="${target.plugins.dir}" includes="org.junit_4*/junit.jar"/>
		<fileset dir="${target.plugins.dir}" includes="org.hamcrest.core_*.jar"/>
		<fileset dir="${target.plugins.dir}" includes="org.hamcrest.ui_*.jar"/>
		<fileset dir="${target.plugins.dir}" includes="org.hamcrest.text_*.jar"/>
		<fileset dir="${target.plugins.dir}" includes="org.hamcrest.library_*.jar"/>
	</path>
			
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath>
			<file file="${result.dist.lib.dir}/jacocoant.jar"/>
		</classpath>
	</taskdef>
	
	<target name="suiteSetUp">
		<echo>classes dir is ${result.tmp.bundle.classes.dir}</echo>
	</target>

	<target name="testCoverageAgent">
		<jacoco:agent property="jacocoagent" append="false" destfile="${basedir}/test.exec" exclClassLoader="sun.reflect.DelegatingClassLoader"/>
		<au:assertPropertySet name="jacocoagent"/>
	</target>
	
	<target name="testCoverageAgentDisabled">
		<jacoco:agent enabled="false" property="jacocoagent" append="false" destfile="${basedir}/test.exec" exclClassLoader="sun.reflect.DelegatingClassLoader"/>
		<au:assertPropertyEquals name="jacocoagent" value=""/>
	</target>
	
	<target name="testCoverageAgentWithNoProperty">
		<au:expectfailure expectedMessage="Property is mandatory">
			<jacoco:agent/>
		</au:expectfailure>
	</target>
	
	<target name="testNoSubTasks">
		<au:expectfailure expectedMessage="A child task must be supplied for the coverage task">
			<jacoco:coverage/>
		</au:expectfailure>
	</target>

	<target name="testMultipleSubTasks">
		<au:expectfailure expectedMessage="Only one child task can be supplied to the coverge task">
			<jacoco:coverage>
				<java fork="true" classname="org.jacoco.ant.test.EmptyMain">
					<classpath>
						<path refid="ant-test-classes"/>
					</classpath>
				</java>
				<java fork="true" classname="org.jacoco.ant.test.EmptyMain">
					<classpath>
						<path refid="ant-test-classes"/>
					</classpath>
				</java>
			</jacoco:coverage>
		</au:expectfailure>
	</target>
	
	<target name="testInvalidSubTask">
		<au:expectfailure expectedMessage="jar is not a valid child of the coverage task">
			<jacoco:coverage>
				<jar destfile="test.jar"/>
			</jacoco:coverage>
		</au:expectfailure>
	</target>

	<target name="testCoverageOfForkedJava">
		<property name="testCoverageOfForkedJava.exec.file" location="${result.tmp.bundle.testdata.dir}/testCoverageOfForkedJava.exec"/>
		<jacoco:coverage destfile="${testCoverageOfForkedJava.exec.file}">
			<java classname="org.jacoco.ant.test.EmptyMain" fork="true">
				<classpath>
					<path refid="ant-test-classes"/>
				</classpath>
			</java>
		</jacoco:coverage>
		<au:assertLogContains text="Enhancing java with coverage"/>
		<au:assertFileExists file="${testCoverageOfForkedJava.exec.file}"/>
	</target>
	
	<target name="testCoverageOfForkedJavaDisabled">
		<property name="testCoverageOfForkedJava.exec.file" location="${result.tmp.bundle.testdata.dir}/testCoverageOfForkedJavaDisabled.exec"/>
		<jacoco:coverage enabled="false" destfile="${testCoverageOfForkedJava.exec.file}">
			<java classname="org.jacoco.ant.test.EmptyMain" fork="true">
				<classpath>
					<path refid="ant-test-classes"/>
				</classpath>
			</java>
		</jacoco:coverage>
		<au:assertLogDoesntContain text="Enhancing java with coverage"/>
		<au:assertFileDoesntExist file="${testCoverageOfForkedJava.exec.file}"/>
	</target>

	<target name="testCoverageOfNonForkedJava">
		<au:expectfailure expectedMessage="Coverage can only be applied on a forked VM">
			<jacoco:coverage>
				<java classname="org.jacoco.ant.test.EmptyMain" fork="false">
					<classpath>
						<path refid="ant-test-classes"/>
					</classpath>
				</java>
			</jacoco:coverage>
		</au:expectfailure>
	</target>

	<target name="testCoverageOfForkedJUnit">
		<property name="testCoverageOfForkedJUnit.exec.file" location="${result.tmp.bundle.testdata.dir}/testCoverageOfForkedJUnit.exec"/>
		<jacoco:coverage destfile="${testCoverageOfForkedJUnit.exec.file}">
			<junit fork="true" >
				<classpath>
					<path refid="bundle-org.junit4"/>
					<path refid="ant-test-classes"/>
				</classpath>
			    <batchtest todir="${result.tmp.bundle.test.dir}" >
					<fileset dir="${result.tmp.bundle.classes.dir}">
						<include name="org/jacoco/ant/test/EmptyTest.class"/>
					</fileset>
			    </batchtest>
			</junit>
		</jacoco:coverage>
		<au:assertLogContains text="Enhancing junit with coverage"/>
		<au:assertFileExists file="${testCoverageOfForkedJUnit.exec.file}"/>
	</target>
	
	<target name="testCoverageOfForkedJUnitDisabled">
		<property name="testCoverageOfForkedJUnit.exec.file" location="${result.tmp.bundle.testdata.dir}/testCoverageOfForkedJUnitDisabled.exec"/>
		<jacoco:coverage enabled="false" destfile="${testCoverageOfForkedJUnit.exec.file}">
			<junit fork="true" >
				<classpath>
					<path refid="bundle-org.junit4"/>
					<path refid="ant-test-classes"/>
				</classpath>
			    <batchtest todir="${result.tmp.bundle.test.dir}" >
					<fileset dir="${result.tmp.bundle.classes.dir}">
						<include name="org/jacoco/ant/test/EmptyTest.class"/>
					</fileset>
			    </batchtest>
			</junit>
		</jacoco:coverage>
		<au:assertLogDoesntContain text="Enhancing junit with coverage"/>
		<au:assertFileDoesntExist file="${testCoverageOfForkedJUnit.exec.file}"/>
	</target>

	<target name="testCoverageOfNonForkedJUnit">
		<au:expectfailure expectedMessage="Coverage can only be applied on a forked VM">
			<jacoco:coverage>
				<junit fork="false">
					<classpath>
						<path refid="bundle-org.junit4"/>
						<path refid="ant-test-classes"/>
					</classpath>
				    <batchtest todir="${result.tmp.bundle.test.dir}" >
						<fileset dir="${result.tmp.bundle.classes.dir}">
							<include name="org/jacoco/ant/test/EmptyTest.class"/>
						</fileset>
				    </batchtest>
				</junit>
			</jacoco:coverage>
		</au:expectfailure>

	</target>
	
	<target name="testMergeNoDestination">
		<au:expectfailure expectedMessage="Destination file must be supplied">
			<jacoco:merge/>
		</au:expectfailure>
	</target>
	
	<target name="testMergeToDirectory">
		<au:expectfailure expectedMessage="Unable to write to destination file">
			<jacoco:merge destfile="${basedir}"/>
		</au:expectfailure>
	</target>
	
	<target name="testMergeEmptySet">
		<property name="testMergeEmptySet.exec.file" value="${result.tmp.bundle.testdata.dir}/empty.exec"/>
		<jacoco:merge destfile="${testMergeEmptySet.exec.file}"/>
		
		<au:assertLogContains text="0 files merged"/>
		<au:assertFileExists file="${testMergeEmptySet.exec.file}"/>
	</target>
	
	<target name="testMergeMultipleFiles">
		<property name="testMergeMultipleFiles.exec.file" value="${result.tmp.bundle.testdata.dir}/merged.exec"/>
		<jacoco:merge destfile="${testMergeMultipleFiles.exec.file}">
			<fileset dir="executionData" includes="*.exec"/>
		</jacoco:merge>
		
		<au:assertLogContains text="2 files merged"/>
		<au:assertFileExists file="${testMergeMultipleFiles.exec.file}"/>
	</target>

</project>